Recursive Parser with prioritization (PEGR) VS PEG:
+Very easy development of grammas in very natural way, for example:
  FORML = PAR / MUL / SUM / NUM
  PAR = '(' FORML ')'
  MUL = FORML MULOP FORML
  MULOP = '*' / '/'
  SUM = FORML SUMOP FORML
  SUMOP = '+' / '-'
  NUM = ('+' / '-')? ['0'-'9']+

-Hard to decide when recursion without data consuming should be stoped, for example:
Grammar
   FORML = PAR / MUL / '1'
   PAR   = '(' FORML ')'
   MUL   = FORML '*' FORML
Input   
  (((1)*1)*1)
Parsing stack (position 0, until first char will be consumed):
  FORML
  PAR
  FORML
  PAR
  FORML
  PAR
  FORML
It is possible to define some limit for max depth, but it is hard to implement 
caching in this case and parsing can be inefficient (deep search for correct output).

In general PEG with flexible caching seems to be a really good compromize between
performance/complexity and flexibility.

As additional step in future - for non-recursive rules we can build/run finite-state machine,
it should improve performance and it will be possible to use not greedy rules for non-recursive
rules.